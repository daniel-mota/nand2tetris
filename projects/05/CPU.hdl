// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // check whether a or c instruction
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=aMux);

    // a register
    Not(in=instruction[15], out=notA);
    Or(a=notA, b=instruction[5], out=loadAReg);
    ARegister(in=aMux, load=loadAReg, out=aReg, out[0..14]=addressM);

    // check whether to load M into ALU
    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=aReg, b=inM, sel=AorM, out=AorMALU);

    // d register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=dReg);

    // ALU
    ALU(x=dReg, y=AorMALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zero, ng=neg);
    
    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    // pc
    Not(in=zero, out=notZero);
    Not(in=neg, out=notNeg);

    // dmux
    DMux8Way(in=true, sel[0]=instruction[0], sel[1]=instruction[1], sel[2]=instruction[2], a=null, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);

    // null


    // jgt
    And(a=notZero, b=notNeg, out=pos);
    And(a=pos, b=jgt, out=jgtMux);


    // jeq
    And(a=zero, b=jeq, out=jeqMux);

    // JGE
    And(a=notNeg, b=jge, out=jgeMux);

    // JLT
    And(a=notZero, b=neg, out=negative);
    And(a=negative, b=jlt, out=jltMux);

    // jne
    And(a=notZero, b=jne, out=jneMux);

    // JLE
    Or(a=neg, b=zero, out=lessThan);
    And(a=lessThan, b=jle, out=jleMux);

    // jmp

    // or 8 way
    Or8Way(in[0]=jgtMux, in[1]=jeqMux, in[2]=jgeMux, in[3]=jltMux, in[4]=jneMux, in[5]=jleMux, in[6]=jmp, out=or8);

    // make sure its c instruction 
    And(a=or8, b=instruction[15], out=or8Cinst);
    Not(in=or8Cinst, out=nor8);

    // mux

    PC(in=aReg, load=or8Cinst, inc=nor8, reset=reset, out[0..14]=pc);
}
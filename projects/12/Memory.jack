// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array free_list;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // heap base
        let free_list = 2048; // at first, list everything is free
        let heap[0] = 0; // next
        let heap[1] = 14335; // length of free
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int current_address;
        var boolean at_last_list;
        var Array current_list;

        let current_address = 0;
        let current_list = free_list;
        let at_last_list = false;

        while ((current_address = 0) & ~(at_last_list)) {
            if (current_list[0] = 0) { let at_last_list = true;}

            if (current_list[1] > (size + 1)) {
                let current_address = current_list + current_list[1] - size;
                let ram[current_address - 1] = size;
                let current_list[1] = current_list[1] - (size + 2);
            } else {
                let current_list = current_list[0];
            }
        }
        return current_address;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let ram[o - 2] = free_list; // set location of dealloc array
        let free_list = o - 2; // set new array in the freelist
        return;
    }    
}
